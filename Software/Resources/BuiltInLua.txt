-- Built-in Lua config. Provides a richer group of pre-defined channel types on 
-- top of those provided by the C# code. See DefaultConfigLua.txt for more
-- documentation.

function toggle(b, default)
	return (math.floor((b+1)/2)+default+1) % 2 == 0
end

function BlankLeds(backlight) 
	leds = {}
	for i = 1,20 do
		leds[i] = 0
	end
	leds[21] = backlight
	return leds
end

function AddTimeChannel(c)
	return AddLuaChannel(c, function(e, b, t, a) return os.date("%H:%M"), BlankLeds(toggle(b,1) and 128 or 0) end).SetPeriod(1000)
end

function AddTouchChannel(c)
	return AddLuaChannel(c, function(e, b, t, a) return (toggle(b,0) and ""..t or ""), BlankLeds(toggle(b,0) and 128 or 0) end)
end

function AddAmbientChannel(c)
	return AddLuaChannel(c, function(e, b, t, a) return (toggle(b,0) and ""..a or ""), BlankLeds(toggle(b,0) and 128 or 0) end)
end

invocationCount = 0
function AddInvocationCounterChannel(c)
	return AddLuaChannel(c, function(e, b, t, a) invocationCount = invocationCount + 1 return ""..invocationCount, BlankLeds(128) end)
end

local timerend = -1
function AddTimerChannel(c, duration)
	return AddLuaChannel(c, function(e, b, t, a) 
		if timerend == -1 then
			if b % 2 == 1 then
				timerend = os.time() + duration
			end
		end
		if timerend == -2 then
			if b % 2 == 0 then
				timerend = -1
			end
		end
		if timerend != -1 then
			remaining = timerend - os.time()
			if remaining < 0 then

				if b % 2 == 1 then
					timerend = -2
					return "", BlankLeds(0)
				end
				if remaining < -300 then
					timerend = -2
					return "", BlankLeds(0)
				end
								
				local ccc = {0, 0, 0}
				local sel = math.floor(((os.time()*10) % 3) + 1)
				ccc[sel] = 255


				return "", {ccc[1], ccc[2], ccc[3], ccc[1], ccc[2], ccc[3], ccc[1], ccc[2], ccc[3], ccc[1], ccc[2], ccc[3], ccc[1], ccc[2], ccc[3], ccc[1], ccc[2], ccc[3], ccc[1], ccc[2], ccc[3]}
			end
			return ""..(math.ceil(remaining)), BlankLeds(128)
		end
		return "", BlankLeds(0)
	end)
end
