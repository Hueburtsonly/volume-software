//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Software.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Software.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- Built-in Lua config. Provides a richer group of pre-defined channel types on 
        ///-- top of those provided by the C# code. See DefaultConfigLua.txt for more
        ///-- documentation.
        ///
        ///function toggle(b, default)
        ///	return (math.floor((b+1)/2)+default+1) % 2 == 0
        ///end
        ///
        ///function BlankLeds(backlight) 
        ///	leds = {}
        ///	for i = 1,20 do
        ///		leds[i] = 0
        ///	end
        ///	leds[21] = backlight
        ///	return leds
        ///end
        ///
        ///function AddTimeChannel(c)
        ///	return AddLuaChannel(c, function(e, b, t, a) return os.date(&quot;%H:%M&quot;), BlankLeds(toggle(b,1) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BuiltInLua {
            get {
                return ResourceManager.GetString("BuiltInLua", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- Basic Documentation:
        ///--  
        ///--   AddLuaChannel(c, function(e, b, t, a) ... end)
        ///--     Puts channel c in control of the Lua callback function. Arguments of the
        ///--     callback are:
        ///--     - e: Encoder count.
        ///--     - b: Button state -- incremented per push and release. So bit 0 is set
        ///--          if the button is currently depressed; bit 1 is set if the button
        ///--          has been pressed an odd number of times. The toggle() function is
        ///--          a utility for implementing a toggle functionality [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DefaultConfigLua {
            get {
                return ResourceManager.GetString("DefaultConfigLua", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon MainIcon {
            get {
                object obj = ResourceManager.GetObject("MainIcon", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon SearchingIcon {
            get {
                object obj = ResourceManager.GetObject("SearchingIcon", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
    }
}
